{"version":3,"sources":["components/Error.js","components/Question.js","components/Form.js","components/Expense.js","components/List.js","helpers.js","components/BugdetControl.js","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Question","saveBudget","saveLeft","updateQuestion","useState","amount","saveAmount","error","saveError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Form","saveExpense","saveCreateExpense","name","saveName","trim","expense","id","shortid","generate","Expense","List","expenses","map","key","checkBudget","budget","left","BudgetControl","App","showquestion","saveExpenses","createxpense","useEffect","budgetLeft","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"yLAWeA,EARD,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACN,uBAAGC,UAAU,4BAA4BD,ICoDlCE,EAnDE,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,WAAYC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,eAAoB,EAE3BC,mBAAS,GAFkB,mBAElDC,EAFkD,KAEzCC,EAFyC,OAG7BF,oBAAS,GAHoB,mBAGlDG,EAHkD,KAG1CC,EAH0C,KAsBzD,OACI,kBAAC,WAAD,KACI,kDACCD,EAAQ,kBAAC,EAAD,CAAOT,QAAQ,0BAA4B,KACpD,0BACIW,SAnBM,SAAAC,GACdA,EAAEC,iBAECN,EAAS,GAAKO,MAAMP,GACnBG,GAAU,IAIdA,GAAU,GACVP,EAAWI,GACXH,EAASG,GACTF,GAAe,MAUP,2BACIU,KAAM,SACNd,UAAY,eACZe,YAAc,kBACdC,SA7BK,SAAAL,GACjBJ,EAAWU,SAASN,EAAEO,OAAOC,MAAO,QA8B5B,2BACIL,KAAO,SACPd,UAAY,8BACZmB,MAAQ,qB,gBCgCbC,EArEF,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,kBAAuB,EAEvBjB,mBAAS,IAFc,mBAExCkB,EAFwC,KAEnCC,EAFmC,OAGlBnB,qBAHkB,mBAGxCC,EAHwC,KAGhCC,EAHgC,OAIpBF,oBAAS,GAJW,mBAIxCG,EAJwC,KAIjCC,EAJiC,KA4B/C,OACI,0BACIC,SAxBW,SAAAC,GAGf,GAFAA,EAAEC,iBAEEN,EAAQ,GAAKO,MAAOP,IAA2B,KAAhBiB,EAAKE,OACpChB,GAAU,OADd,CAIAA,GAAU,GAEV,IAAMiB,EAAU,CACZH,OACAjB,SACAqB,GAAIC,IAAQC,YAGhBR,EAAYK,GACZJ,GAAkB,GAElBE,EAAS,IACTjB,EAAW,OAOP,sDACEC,EAAQ,kBAAC,EAAD,CAAOT,QAAQ,8BAAgC,KACzD,yBAAKC,UAAU,SACX,mDACA,2BACIc,KAAO,OACPd,UAAY,eACZe,YAAc,gBACdI,MAAQI,EACRP,SAAW,SAAAL,GAAC,OAAIa,EAASb,EAAEO,OAAOC,WAG1C,yBAAKnB,UAAU,SACX,yCACA,2BACIc,KAAO,SACPd,UAAY,eACZe,YAAc,YACdI,MAASb,EACTU,SAAY,SAAAL,GAAC,OAAIJ,EAAWU,SAASN,EAAEO,OAAOC,YAIlD,2BACIL,KAAO,SACPd,UAAY,8BACZmB,MAAQ,mBC9CbW,EAfC,SAAC,GAAD,IAAEJ,EAAF,EAAEA,QAAF,OACZ,wBAAI1B,UAAW,UACX,2BACK0B,EAAQH,KACT,0BAAMvB,UAAU,SAAhB,UACO0B,EAAQpB,WCaZyB,EAjBF,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACT,yBAAKhC,UAAW,qBACZ,oCACCgC,EAASC,KAAI,SAAAP,GAAO,OACjB,kBAAC,EAAD,CACIQ,IAAMR,EAAQC,GACdD,QAAWA,SCVdS,EAAc,SAACC,EAAQC,GAWhC,OAPMD,EAAS,EAAKC,EACR,qBACCD,EAAS,EAAMC,EAChB,sBAEA,uBCaDC,EAlBO,SAAC,GAAoB,IAAnBF,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,KAC5B,OACI,kBAAC,WAAD,KACI,yBAAKrC,UAAU,uBAAf,kBACeoC,GAEf,yBAAKpC,UAAWmC,EAAYC,EAAQC,IAApC,gBACaA,KCyDVE,MA9Df,WAAgB,IAAD,EAEgBlC,mBAAS,GAFzB,mBAEN+B,EAFM,KAEElC,EAFF,OAGYG,mBAAS,GAHrB,mBAGNgC,EAHM,KAGAlC,EAHA,OAI0BE,oBAAS,GAJnC,mBAINmC,EAJM,KAIQpC,EAJR,OAKoBC,mBAAS,IAL7B,mBAKN2B,EALM,KAKIS,EALJ,OAMkBpC,mBAAS,IAN3B,mBAMNqB,EANM,KAMGL,EANH,OAO6BhB,oBAAS,GAPtC,mBAONqC,EAPM,KAOQpB,EAPR,KAuBb,OAdAqB,qBAAU,WACR,GAAGD,EAAa,CACdD,EAAa,GAAD,mBACTT,GADS,CAEZN,KAGF,IAAMkB,EAAaP,EAAOX,EAAQpB,OAClCH,EAASyC,GAETtB,GAAkB,MAEjB,CAACI,EAASgB,EAAcV,EAAUK,IAGnC,yBAAKrC,UAAU,aACb,gCACA,uCACA,yBAAKA,UAAY,iCACdwC,EAED,kBAAC,EAAD,CACFtC,WAAcA,EACdC,SAAYA,EACZC,eAAkBA,IAIhB,yBAAKJ,UAAU,OACf,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEqB,YAAeA,EACfC,kBAAqBA,KAGzB,yBAAKtB,UAAU,mBACb,kBAAC,EAAD,CACEgC,SAAUA,IAEZ,kBAAC,EAAD,CACAI,OAAUA,EACVC,KAAQA,UC5CEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD4H7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApD,GACLqD,QAAQrD,MAAMA,EAAMT,a","file":"static/js/main.fd36e9fb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\n\nconst Error = ({message}) => (\n        <p className='alert alert-danger error'>{message}</p>\n    );\n\n    Error.propTypes ={\n        message: PropTypes.string.isRequired,\n    }\n\nexport default Error;","import React, {Fragment, useState } from 'react';\nimport PropTypes from 'prop-types'\nimport Error from './Error'\n\n\nconst Question = ({saveBudget, saveLeft, updateQuestion}) => {\n\n    const [amount , saveAmount] = useState(0);\n    const [error , saveError] = useState(false)\n    const defineBudget = e => {\n        saveAmount(parseInt(e.target.value, 10))\n    }\n\n    const addBudget = e => {\n        e.preventDefault();\n\n        if(amount < 1 || isNaN(amount)){\n            saveError(true)\n            return;\n        }\n\n        saveError(false)\n        saveBudget(amount);\n        saveLeft(amount);\n        updateQuestion(false);\n    }\n\n    return (  \n        <Fragment>\n            <h2>Insert your budget</h2>\n            {error ? <Error message='Budget is not correct'/> : null}\n            <form\n                onSubmit = {addBudget}\n            >\n                <input\n                    type ='number'\n                    className = 'u-full-width'\n                    placeholder = '1.000.000€'\n                    onChange = {defineBudget}\n                />\n                <input\n                    type = 'submit'\n                    className = 'button-primary u-full-width'\n                    value = 'Define budget'\n                />\n            </form>\n        </Fragment>\n    );\n}\n \nQuestion.propTypes ={\n    saveBudget: PropTypes.func.isRequired,\n    saveLeft: PropTypes.func.isRequired,\n    updateQuestion: PropTypes.func.isRequired\n}\n\nexport default Question;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\nimport shortid from 'shortid';\nimport Error from './Error'\n\n\nconst Form = ({saveExpense, saveCreateExpense}) => {\n\n    const [name,saveName] = useState('');\n    const [amount, saveAmount] = useState();\n    const [error, saveError] = useState(false);\n\n    const addExpense = e => {\n        e.preventDefault();\n\n        if (amount <1 || isNaN (amount) || name.trim() === ''){\n            saveError(true);\n            return;\n        }\n        saveError(false);\n            \n        const expense = {\n            name,\n            amount,\n            id: shortid.generate()\n        }\n\n        saveExpense(expense);\n        saveCreateExpense(true);\n\n        saveName('');\n        saveAmount('');\n    }\n\n    return ( \n        <form\n            onSubmit = {addExpense}\n        >\n            <h2>Add your expenses here</h2>\n            { error ? <Error message='Complete mandatory fields'/> : null }\n            <div className='campo'>\n                <label>Expenses concept</label>\n                <input\n                    type = 'text'\n                    className = 'u-full-width'\n                    placeholder = 'Eg. transport'\n                    value ={name}\n                    onChange ={e => saveName(e.target.value)}\n                />\n            </div>\n            <div className='campo'>\n                <label>Amount</label>\n                <input\n                    type = 'number'\n                    className = 'u-full-width'\n                    placeholder = '200€'\n                    value = {amount}\n                    onChange = {e => saveAmount(parseInt(e.target.value) )}\n                />\n            </div>\n\n                <input\n                    type = 'submit'\n                    className = 'button-primary u-full-width'\n                    value = 'add expenses'\n                />\n        </form>\n     );\n}\n \nForm.propTypes ={\n    saveExpense: PropTypes.func.isRequired,\n    saveCreateExpense: PropTypes.func.isRequired\n}\n\nexport default Form;","import React from 'react';\nimport PropTypes from 'prop-types'\n\nconst Expense = ({expense}) => (\n    <li className= 'gastos'>\n        <p>\n            {expense.name}\n            <span className='gasto'>\n                € {expense.amount}\n            </span>\n        </p>\n    </li>\n);\n \nExpense.propTypes ={\n    expense: PropTypes.object.isRequired\n}\n\nexport default Expense;","import React from 'react';\nimport Expense from './Expense'\nimport PropTypes from 'prop-types'\n\nconst List = ({expenses}) => (\n    <div className ='gastos-realizados'>\n        <h2>List</h2>\n        {expenses.map(expense => (\n            <Expense\n                key ={expense.id}\n                expense = {expense}\n\n            />\n        ))}\n    </div>\n);\n \nList.propTypes = {\n    expenses: PropTypes.array.isRequired\n}\n\nexport default List;","export const checkBudget = (budget, left) => {\n    \n    let clase;\n\n    if ( (budget / 4) > left) {\n        clase = 'alert alert-danger'\n    } else if ( (budget / 2 ) > left){\n        clase = 'alert alert-warning'\n    } else {\n        clase = 'alert alert-success'\n    }\n    return clase;\n}","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types'\nimport { checkBudget } from '../helpers'\n\nconst BudgetControl = ({budget, left}) => {\n    return (  \n        <Fragment>\n            <div className='alert alert-primary'>\n                Budget: € {budget}\n            </div>\n            <div className={checkBudget(budget, left)}>\n                Left: € {left}\n            </div>\n        </Fragment>\n    );\n}\n\nBudgetControl.propTypes ={\n    budget: PropTypes.number.isRequired,\n    left: PropTypes.number.isRequired\n} \n\nexport default BudgetControl;","import React, { useState, useEffect } from 'react';\nimport Question from './components/Question'\nimport Form from './components/Form'\nimport List from './components/List'\nimport BudgetControl from './components/BugdetControl'\n\nfunction App() {\n\n  const [budget, saveBudget] = useState(0);\n  const [left, saveLeft] = useState(0);\n  const [showquestion, updateQuestion] = useState(true);\n  const [expenses, saveExpenses] = useState([])\n  const [expense, saveExpense] = useState({});\n  const [createxpense, saveCreateExpense] = useState(false)\n\n  useEffect(()=> {\n    if(createxpense){\n      saveExpenses([\n      ...expenses,\n      expense\n    ])\n\n    const budgetLeft = left - expense.amount;\n    saveLeft(budgetLeft);\n    \n    saveCreateExpense(false);\n  }\n  }, [expense, createxpense, expenses, left])\n\n  return (\n    <div className='container'>\n      <header>\n      <h1>Balance</h1>\n      <div className = 'contenido-principal contenido'>\n        {showquestion ? \n        (\n        <Question\n      saveBudget = {saveBudget}\n      saveLeft = {saveLeft}\n      updateQuestion = {updateQuestion}\n      />\n      ) : \n      (\n        <div className='row'>\n        <div className='one-half column'>\n          <Form\n            saveExpense = {saveExpense}\n            saveCreateExpense = {saveCreateExpense}\n          />\n        </div>\n        <div className='one-half column'>\n          <List\n            expenses={expenses}\n          />\n          <BudgetControl\n          budget = {budget}\n          left = {left}\n          />\n        </div>\n      </div>\n      )\n      }\n      </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render\n(<App /> , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}